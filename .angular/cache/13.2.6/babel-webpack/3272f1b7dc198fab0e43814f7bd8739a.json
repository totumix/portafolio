{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let BackendService = /*#__PURE__*/(() => {\n  class BackendService {\n    constructor(_http) {\n      this._http = _http;\n    }\n\n    post(path, params, extraParams) {\n      this.url = !extraParams ? `${environment.serverUrl}${path}` : `${environment.serverUrl}${path}?${extraParams}`;\n      return this._http.post(this.url, params);\n    }\n\n    get(path, params) {\n      this.url = `${environment.serverUrl}${path}`;\n      return this._http.get(this.url);\n    }\n\n    delete(path, id) {\n      this.url = `${environment.serverUrl}${path}/${id}`;\n      return this._http.delete(this.url);\n    }\n\n    update(path, _id, entity) {\n      this.url = `${environment.serverUrl}${path}/${_id}`;\n      return this._http.put(this.url, entity, {});\n    }\n\n    handleError(error) {\n      console.error('An error occurred', error);\n      var httpErrorResponse = error;\n      return httpErrorResponse;\n    }\n\n    getIdentity() {\n      let identity = JSON.parse(localStorage.getItem('identity'));\n      identity != 'undefined' ? this.identity = identity : this.identity = null;\n      return this.identity;\n    } //SERVICIOS QUE NECESITAN TOKEN DE AUTENTICACION\n\n\n    getAuth(path) {\n      this.url = `${environment.serverUrl}${path}`;\n      const options = {\n        headers: this.authenticationHeaders\n      };\n      return this._http.get(this.url, options);\n    }\n\n  }\n\n  BackendService.ɵfac = function BackendService_Factory(t) {\n    return new (t || BackendService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  BackendService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BackendService,\n    factory: BackendService.ɵfac\n  });\n  return BackendService;\n})();","map":null,"metadata":{},"sourceType":"module"}